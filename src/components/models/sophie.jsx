/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export default function Model(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("models/sophie.glb");
  const { actions, names } = useAnimations(animations, group);

  const [currentActionIndex, setCurrentActionIndex] = useState(
    Math.floor(Math.random() * Object.keys(actions).length),
  );

  useEffect(() => {
    if (actions[names[currentActionIndex]]) {
      const currentAction = actions[names[currentActionIndex]];
      currentAction.reset().fadeIn(0.5).play();

      const mixer = currentAction.getMixer();
      const handleActionEnd = () => {
        setCurrentActionIndex(
          Math.floor(Math.random() * Object.keys(actions).length),
        );
      };

      mixer.addEventListener("finished", handleActionEnd);
      mixer.addEventListener("loop", handleActionEnd);

      return () => {
        mixer.removeEventListener("finished", handleActionEnd);
        mixer.removeEventListener("loop", handleActionEnd);
      };
    }
  }, [actions, names, currentActionIndex]);

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      scale={4}
      position={[0, -2, 0]}
    >
      <group name="Scene">
        <group
          name="Empty"
          position={[0, 0, 0]}
          rotation={[0, 0, 0]}
          scale={0.72}
        />
        <group name="metarig" rotation={[0, -0.5, 0]}>
          <skinnedMesh
            name="Cube001"
            geometry={nodes.Cube001.geometry}
            material={materials["Material.001"]}
            skeleton={nodes.Cube001.skeleton}
          />
          <skinnedMesh
            name="yeux_1"
            geometry={nodes.yeux_1.geometry}
            material={materials.Material}
            skeleton={nodes.yeux_1.skeleton}
          />
          <primitive object={nodes.spine004} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("models/sophie.glb");
